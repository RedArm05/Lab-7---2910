@page "/users"
@using Lab5_Elijah_Mckeehan.Shared
@using Lab5_Elijah_Mckeehan.Services
@inject ILibraryService LibraryService
@inject IMessageService MessageService
@namespace Lab5_Elijah_Mckeehan.Components.Pages
<h3>User Management</h3>

<!-- User Inputs -->
<div>
    <label>Name:</label>
    <input @bind="newUser.Name" placeholder="Enter Name" />
</div>
<div>
    <label>Email:</label>
    <input @bind="newUser.Email" placeholder="Enter Email" />
</div>

<!-- Button to Add User -->
<button @onclick="AddUser" disabled="@(IsInputValid ? null : true)">Add User</button>

<!-- Display the current list of users -->
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.Name</td>
                <td>@user.Email</td>
                <td>
                    <button @onclick="() => EditUser(user)">Edit</button>
                    <button @onclick="() => DeleteUser(user.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h4>Debug Messages</h4>
<ul>
    @foreach (var message in MessageService.Messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private List<User> users = new List<User>();
    private User newUser = new User();
    private bool IsInputValid =>
        newUser.Email.Contains("@") &&
        newUser.Name.Any(char.IsLetter);

    protected override async Task OnInitializedAsync()
    {
        users = await LibraryService.GetUsersAsync();
        MessageService.AddMessage($"Loaded {users.Count} users from CSV.");
    }

    private async Task AddUser()
    {
        if (IsInputValid)
        {
            var userToAdd = new User
                {
                    Id = users.Any() ? users.Max(u => u.Id) + 1 : 1,
                    Name = newUser.Name,
                    Email = newUser.Email
                };

            users.Add(userToAdd);
            MessageService.AddMessage($"User added → ID: {userToAdd.Id}, Name: {userToAdd.Name}, Email: {userToAdd.Email}");

            try
            {
                await LibraryService.SaveUsersAsync(users);
                MessageService.AddMessage("User saved to CSV successfully.");
            }
            catch (Exception ex)
            {
                MessageService.AddMessage($"Error saving user to CSV: {ex.Message}");
            }

            newUser = new User();
            MessageService.AddMessage("User added and form reset.");
        }
        else
        {
            MessageService.AddMessage("Please provide a valid name and email.");
        }
    }

    private async Task EditUser(User user)
    {
        newUser = user;  // Populate form with existing data
    }

    private async Task DeleteUser(int userId)
    {
        var userToDelete = users.FirstOrDefault(u => u.Id == userId);
        if (userToDelete != null)
        {
            users.Remove(userToDelete);
            try
            {
                await LibraryService.SaveUsersAsync(users); // Save the updated list
                MessageService.AddMessage($"User with ID {userId} deleted.");
            }
            catch (Exception ex)
            {
                MessageService.AddMessage($"Error deleting user: {ex.Message}");
            }
        }
    }
}